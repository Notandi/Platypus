%{
	import java.io.*;
	import java.util.*;
%}

%token ERROR, IF, ELSE, ELSIF, WHILE, VAR, RETURN,
%token <sval> NAME, OPNAME, LITERAL
%type <obj> program, function, exprs, expr, binopexpr,smallexpr, innerexprs, innerinnerexprs,ifexpr, ifrest, body, bodyexprs
%type <ival> parlist, parparlist, decls
%%

start
 : program 																				{generateProgram(name, ((Vector<Object>)($1)).toArray());}
 ;

program
 : program function 															{ ((Vector<Object>)($1)).add($2); $$=$1;}
 | function																				{ $$= new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
 ;

function
 :	{
  		varCount = 0;
 			varTable = new HashMap<String, Integer>();
		}
 		NAME '(' parlist ')' '{' decls exprs '}' 			{ $$ = new Object[]{ $2, $4,((Vector<Object>)($8)).toArray(), $7 };}
 ;

parlist
	:																								{$$ = 0;}
	| parparlist																		{$$ = $1;}
	;

parparlist
	: NAME																					{ addVar($1); $$ = 1;}
	| NAME ',' parparlist														{ addVar($1); $$ = $3 + 1;}
	;

decls
	:																								{$$ = 0;}
	| VAR parparlist ';' decls 											{$$ = $2 + $4;}
	;

exprs
 	: expr ';'																			{$$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
	| exprs expr ';'																{ ((Vector<Object>)($1)).add($2); $$ = $1; }
	;

expr
	: RETURN expr																		{$$ = new Object[]{CodeType.RETURN, $2 };}
	| NAME '=' expr																	{$$ = new Object[]{CodeType.STORE, findVar($1), $3};}
	| binopexpr																			{$$ = $1;}
	;

binopexpr
	: smallexpr																			{$$ = $1;}
	| smallexpr OPNAME expr													{$$ = new Object[]{CodeType.CALL, $2, new Object[]{$1,$3} };}
	;

smallexpr
	: NAME																					{$$ = new Object[]{CodeType.FETCH, findVar($1)};}
	| NAME '(' innerexprs ')'												{$$ = new Object[]{CodeType.CALL, $1, ((Vector<Object>)($3)).toArray()};}
	| WHILE expr body																{$$ = new Object[]{CodeType.WHILE, $2, $3};}
	| ifexpr																				{$$ = $1;}
	| LITERAL																				{$$ = new Object[]{CodeType.LITERAL, $1};}
	| OPNAME smallexpr															{$$ = new Object[]{CodeType.CALL,$1, new Object[]{$2} };}
	| '(' expr ')'																	{$$ = $2;}
	;

innerexprs
	:																								{$$ = new Vector<Object>();}
	| innerinnerexprs																{$$ = $1;}
	;

innerinnerexprs
	: expr																					{$$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
	| expr ',' innerinnerexprs											{((Vector<Object>)($1)).add($3); $$ = $1; }
	;

ifexpr
	: IF '(' expr ')' body ifrest										{$$ = new Object[]{CodeType.IF, $3, $5, $6 };}
	;

ifrest
	:																								{$$ = null;}
	| ELSE body																			{$$ = new Object[]{CodeType.ELSE, $2};}
	| ELSIF '(' expr ')' body ifrest								{$$ = new Object[]{CodeType.ELSIF, $3, $5, $6 };}
	;

body
	: '{' bodyexprs '}'															{$$ = new Object[]{CodeType.BODY, ((Vector<Object>)($2)).toArray()};}
	;

bodyexprs
	: expr ';'																			{$$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
	| bodyexprs expr ';'														{((Vector<Object>)($1)).add($2); $$ = $1;}
	;

%%
enum CodeType {
 IF,
 ELSE,
 ELSIF,
 LITERAL,
 CALL,
 RETURN,
 STORE,
 WHILE,
 FETCH,
 BODY
};

static private String name;
private NanoMorphoLexer lexer;
private static int varCount;
private static HashMap < String, Integer > varTable;

private static void addVar(String name) {
 if (varTable.get(name) != null)
	throw new Error("Variable " + name + " already exists, near line ");
 varTable.put(name, varCount++);
}

private static int findVar(String name) {
 Integer res = varTable.get(name);
 if (res == null)
	throw new Error("Variable " + name + " does not exist, near line ");
 return res;
}

int last_token_read;

private int yylex()
{
	int yyl_return = -1;
	try
	{
		yylval = null;
		last_token_read = yyl_return = lexer.yylex();
		if( yylval==null )
			yylval = new NanoMorphoParserVal(NanoMorphoParser.yyname[yyl_return]);
	}
	catch (IOException e)
	{
		System.err.println("IO error: "+e);
	}
	return yyl_return;
}

public void yyerror( String error )
{
	System.out.println("Error:  "+error);
	System.out.println("Token:  "+NanoMorphoParser.yyname[last_token_read]);
	System.exit(1);
}

public NanoMorphoParser( Reader r )
{
	lexer = new NanoMorphoLexer(r,this);
}

public static void main( String args[] )
		throws IOException
{
	NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(args[0]));
	name = args[0].substring(0,args[0].lastIndexOf('.'));
	yyparser.yyparse();
}

static void generateProgram(String filename, Object[] funs) {
  String programname = filename;
  System.out.println("\"" + programname + ".mexe\" = main in");
  System.out.println("!");
  System.out.println("{{");
  for (Object f: funs) {
   generateFunction((Object[]) f);
  }
  System.out.println("}}");
  System.out.println("*");
  System.out.println("BASIS;");
 }

 static void generateFunction(Object[] fun) {
  String fname = (String) fun[0];
  int count = (Integer) fun[1];
  System.out.println("#\"" + fname + "[f" + count + "]\" =");
  System.out.println("[");
  Object[] expressions = (Object[]) fun[2];
  int decl = (Integer) fun[3];
  if (decl > 0) System.out.println("(MakeVal null)");
  for (int j = 0; j < decl; j++) {
   System.out.println("(Push)");
  }
  for (int i = 0; i < expressions.length; i++) {
   generateExpr((Object[]) expressions[i]);
  }
  System.out.println("(Return)");
  System.out.println("];");
 }


 static int nextLab = 0;

 static int newLab() {
  return nextLab++;
 }

 static void generateExpr(Object[] e) {
  switch ((CodeType) e[0]) {
   case FETCH:
    System.out.println("(Fetch " + (Integer) e[1] + ")");
    return;
   case LITERAL:
    System.out.println("(MakeVal " + (String) e[1] + ")");
    return;
   case STORE:
    generateExpr((Object[]) e[2]);
    System.out.println("(Store " + (Integer) e[1] + ")");
    return;
   case RETURN:
    generateExpr((Object[]) e[1]);
    System.out.println("(Return)");
    return;
   case BODY:
    Object[] bodyExpr = (Object[]) e[1];
    for (int i = 0; i < bodyExpr.length; i++) {
     generateExpr((Object[]) bodyExpr[i]);
    }
    return;
   case IF:
    int ElseLab = newLab();
    int EndLab = newLab();
    generateExpr((Object[]) e[1]);
    System.out.println("(GoFalse _" + ElseLab + ")");
    generateExpr((Object[]) e[2]);
    System.out.println("(Go _" + EndLab + ")");
    if(e[3] != null){
      generateIfRest((Object[]) e[3], ElseLab, EndLab);
    }
		else{
			System.out.println("_" + ElseLab + ":");
		}
    System.out.println("_" + EndLab + ":");
    return;
   case CALL:
    Object[] exp = (Object[]) e[2];
    for (int i = 0; i < exp.length; i++) {
     generateExpr((Object[]) exp[i]);
     if (i < exp.length - 1) System.out.println("(Push)");
    }
    System.out.println("(Call #\"" + e[1] + "[f" + exp.length + "]\" " + exp.length + ")");
    return;
   case WHILE:
    int WhileStartLab = newLab();
    int WhileEndLab = newLab();
    System.out.println("_" + WhileStartLab + ":");
    generateExpr((Object[]) e[1]);
    System.out.println("(GoFalse _" + WhileEndLab + ")");
    generateExpr((Object[]) e[2]);
    System.out.println("(Go _" + WhileStartLab + ")");
    System.out.println("_" + WhileEndLab + ":");

  }
 }
 static void generateIfRest(Object[] e, int ElseLab, int EndLab) {
	 switch	((CodeType) e[0]) {
		 case ELSIF:
			 int nextElseLab = newLab();
			 System.out.println("_" + ElseLab + ":");
			 generateExpr((Object []) e[1]);
			 System.out.println("(GoFalse _" + nextElseLab + ")");
			 generateExpr((Object[]) e[2]);
			 System.out.println("(Go _" + EndLab + ")");
			 if(e[3] != null){
				 generateIfRest((Object[]) e[3], nextElseLab, EndLab);
			 }
			 else {
				 System.out.println("_" + nextElseLab + ":");
			 }
			 return;
		 case ELSE:
			 System.out.println("_" + ElseLab + ":");
			 generateExpr((Object[]) e[1]);
	 }
 }
